{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","trim","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","isInputError","handleChangeInput","key","prevState","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96306163.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value.trim();\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState<Movie>({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = newMovie;\n\n  const resetMovieInputs = () => {\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const isInputError = !newMovie.title.trim()\n    || !newMovie.imgUrl.trim()\n    || !newMovie.imdbUrl.trim()\n    || !newMovie.imdbId.trim();\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    setCount(currentCount => (currentCount + 1));\n\n    onAdd(newMovie);\n\n    resetMovieInputs();\n  }\n\n  function handleChangeInput(value: string, key: string) {\n    setNewMovie(prevState => (\n      {\n        ...prevState,\n        [key]: value,\n      }\n    ));\n  }\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(value: string) => handleChangeInput(value, 'title')}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(value: string) => handleChangeInput(value, 'description')}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(value: string) => handleChangeInput(value, 'imgUrl')}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(value: string) => handleChangeInput(value, 'imdbUrl')}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(value: string) => handleChangeInput(value, 'imdbId')}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isInputError}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const handleAddMuvie = (movie: Movie) => setMovies([...movies, movie]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleAddMuvie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}